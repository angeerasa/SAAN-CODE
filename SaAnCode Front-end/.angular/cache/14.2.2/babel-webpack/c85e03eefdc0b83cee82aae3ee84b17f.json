{"ast":null,"code":"import _asyncToGenerator from \"C:/Angeerasa/Projects/Angular/SaAnCode/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { User } from './interfaces/login.interface';\nimport { lastValueFrom, Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DataService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  createQuestion(question) {\n    console.log('ENTERED INTO CREATEQUESTION', this.authToken);\n    const header = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n    return this.http.post(\"http://localhost:3000/write/problem\", question, {\n      headers: header\n    });\n  }\n\n  getProfile() {\n    const head = new HttpHeaders().set('Authorization', `Bearer ${this.authToken}`);\n    return this.http.get('http://localhost:3000/login/me', {\n      headers: head\n    });\n  }\n\n  getProfileByProblemId(problemId) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this.authToken) {\n        let email = prompt('Enter login');\n        let password = prompt('pas');\n        yield _this.login({\n          email,\n          password\n        });\n      }\n\n      const header = new HttpHeaders().set('Authorization', `Bearer ${_this.authToken}`);\n      let response;\n\n      try {\n        response = yield lastValueFrom(_this.http.get(`http://localhost:3000/user/${problemId}`, {\n          headers: header\n        }));\n      } catch (e) {\n        console.log('error::::', e);\n      }\n\n      return {\n        creator: response.user,\n        userProblems: response.userProblems\n      };\n    })();\n  }\n\n  login(userLogin) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let user;\n      user = yield lastValueFrom(_this2.http.post('http://localhost:3000/login', userLogin));\n      _this2.authToken = user.token;\n      console.log(\"You are successfully Logged In!\");\n      return user;\n    })();\n  }\n\n}\n\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAASA,UAAT,EAAoDC,WAApD,QAAuE,sBAAvE;AACA,SAAgBC,IAAhB,QAA4B,8BAA5B;AACA,SAASC,aAAT,EAAwBC,UAAxB,QAAsD,MAAtD;;;AAMA,OAAM,MAAOC,WAAP,CAAkB;EAGtBC,YAAmBC,IAAnB,EAAkC;IAAf;EAAoB;;EAEvCC,cAAc,CAACC,QAAD,EAAa;IACzBC,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2C,KAAKC,SAAhD;IACA,MAAMC,MAAM,GAAG,IAAIZ,WAAJ,GAAkBa,GAAlB,CAAsB,eAAtB,EAAsC,UAAU,KAAKF,SAAS,EAA9D,CAAf;IACA,OAAO,KAAKL,IAAL,CAAUQ,IAAV,CAAe,qCAAf,EAAqDN,QAArD,EAA8D;MAACO,OAAO,EAACH;IAAT,CAA9D,CAAP;EACD;;EACDI,UAAU;IACR,MAAMC,IAAI,GAAG,IAAIjB,WAAJ,GAAkBa,GAAlB,CAAsB,eAAtB,EAAwC,UAAU,KAAKF,SAAS,EAAhE,CAAb;IACA,OAAO,KAAKL,IAAL,CAAUY,GAAV,CAAoB,gCAApB,EAAsD;MAACH,OAAO,EAACE;IAAT,CAAtD,CAAP;EACD;;EAEKE,qBAAqB,CAACC,SAAD,EAAiB;IAAA;;IAAA;MAC1C,IAAG,CAAC,KAAI,CAACT,SAAT,EAAmB;QACjB,IAAIU,KAAK,GAAGC,MAAM,CAAC,aAAD,CAAlB;QACA,IAAIC,QAAQ,GAAGD,MAAM,CAAC,KAAD,CAArB;QACA,MAAM,KAAI,CAACE,KAAL,CAAW;UAACH,KAAD;UAAOE;QAAP,CAAX,CAAN;MACD;;MACD,MAAMX,MAAM,GAAG,IAAIZ,WAAJ,GAAkBa,GAAlB,CAAsB,eAAtB,EAAsC,UAAU,KAAI,CAACF,SAAS,EAA9D,CAAf;MACA,IAAIc,QAAJ;;MACA,IAAG;QACDA,QAAQ,SAAQvB,aAAa,CAAC,KAAI,CAACI,IAAL,CAAUY,GAAV,CAAc,8BAA8BE,SAAS,EAArD,EAAwD;UAACL,OAAO,EAAEH;QAAV,CAAxD,CAAD,CAA7B;MACD,CAFD,CAEC,OAAMc,CAAN,EAAQ;QACPjB,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBgB,CAAxB;MACD;;MACD,OAAO;QAACC,OAAO,EAACF,QAAQ,CAACG,IAAlB;QAAwBC,YAAY,EAACJ,QAAQ,CAACI;MAA9C,CAAP;IAb0C;EAe3C;;EAEKL,KAAK,CAACM,SAAD,EAAc;IAAA;;IAAA;MACvB,IAAIF,IAAJ;MACAA,IAAI,SAAS1B,aAAa,CAAC,MAAI,CAACI,IAAL,CAAUQ,IAAV,CAAqB,6BAArB,EAAmDgB,SAAnD,CAAD,CAA1B;MACA,MAAI,CAACnB,SAAL,GAAiBiB,IAAI,CAACG,KAAtB;MACAtB,OAAO,CAACC,GAAR,CAAY,iCAAZ;MACA,OAAOkB,IAAP;IALuB;EAMxB;;AAtCqB;;;mBAAXxB,aAAW4B;AAAA;;;SAAX5B;EAAW6B,SAAX7B,WAAW;EAAA8B,YAFV","names":["HttpClient","HttpHeaders","User","lastValueFrom","Observable","DataService","constructor","http","createQuestion","question","console","log","authToken","header","set","post","headers","getProfile","head","get","getProfileByProblemId","problemId","email","prompt","password","login","response","e","creator","user","userProblems","userLogin","token","i0","factory","providedIn"],"sourceRoot":"","sources":["C:\\Angeerasa\\Projects\\Angular\\SaAnCode\\src\\app\\services\\data.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { HttpClient, HttpClientModule, HttpHandler, HttpHeaders } from '@angular/common/http';\nimport { Login, User } from './interfaces/login.interface';\nimport { lastValueFrom, Observable, throwError } from 'rxjs';\nimport { UrlSerializer } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService{\n  authToken!: String;\n  \n  constructor(public http:HttpClient) { }\n\n  createQuestion(question:any){\n    console.log('ENTERED INTO CREATEQUESTION', this.authToken)\n    const header = new HttpHeaders().set('Authorization',`Bearer ${this.authToken}`)\n    return this.http.post(\"http://localhost:3000/write/problem\",question,{headers:header})\n  }\n  getProfile():Observable<User>{ // returns observable\n    const head = new HttpHeaders().set('Authorization',  `Bearer ${this.authToken}`)\n    return this.http.get<User>('http://localhost:3000/login/me', {headers:head});  \n  }\n\n  async getProfileByProblemId(problemId:string){ // name, age, occ, problems_write_count\n    if(!this.authToken){\n      let email = prompt('Enter login');\n      let password = prompt('pas');\n      await this.login({email,password});\n    }\n    const header = new HttpHeaders().set('Authorization',`Bearer ${this.authToken}`)\n    let response!:any;\n    try{\n      response= await lastValueFrom(this.http.get(`http://localhost:3000/user/${problemId}`,{headers: header}))\n    }catch(e){\n      console.log('error::::',e);\n    }\n    return {creator:response.user, userProblems:response.userProblems}\n\n  }\n  \n  async login(userLogin:any):Promise<User>{\n    let user!:User;\n    user = await lastValueFrom(this.http.post<User>('http://localhost:3000/login',userLogin))\n    this.authToken = user.token;\n    console.log(\"You are successfully Logged In!\")\n    return user\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}